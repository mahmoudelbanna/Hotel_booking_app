// Mocks generated by Mockito 5.4.5 from annotations
// in hotel_booking_app/test/features/overview/presentation/pages/overview_page_test.dart.
// Do not manually edit this file.

// ignore_for_file: no_leading_underscores_for_library_prefixes
import 'dart:async' as _i5;

import 'package:connectivity_plus/connectivity_plus.dart' as _i3;
import 'package:hotel_booking_app/hotel_booking_app.dart' as _i2;
import 'package:hydrated_bloc/hydrated_bloc.dart' as _i7;
import 'package:internet_connection_checker/internet_connection_checker.dart'
    as _i4;
import 'package:mockito/mockito.dart' as _i1;
import 'package:mockito/src/dummies.dart' as _i6;

// ignore_for_file: type=lint
// ignore_for_file: avoid_redundant_argument_values
// ignore_for_file: avoid_setters_without_getters
// ignore_for_file: comment_references
// ignore_for_file: deprecated_member_use
// ignore_for_file: deprecated_member_use_from_same_package
// ignore_for_file: implementation_imports
// ignore_for_file: invalid_use_of_visible_for_testing_member
// ignore_for_file: must_be_immutable
// ignore_for_file: prefer_const_constructors
// ignore_for_file: unnecessary_parenthesis
// ignore_for_file: camel_case_types
// ignore_for_file: subtype_of_sealed_class

class _FakeToggleFavoriteUseCase_0 extends _i1.SmartFake
    implements _i2.ToggleFavoriteUseCase {
  _FakeToggleFavoriteUseCase_0(Object parent, Invocation parentInvocation)
    : super(parent, parentInvocation);
}

class _FakeFavoriteState_1 extends _i1.SmartFake implements _i2.FavoriteState {
  _FakeFavoriteState_1(Object parent, Invocation parentInvocation)
    : super(parent, parentInvocation);
}

class _FakeLanguageState_2 extends _i1.SmartFake implements _i2.LanguageState {
  _FakeLanguageState_2(Object parent, Invocation parentInvocation)
    : super(parent, parentInvocation);
}

class _FakeConnectivity_3 extends _i1.SmartFake implements _i3.Connectivity {
  _FakeConnectivity_3(Object parent, Invocation parentInvocation)
    : super(parent, parentInvocation);
}

class _FakeInternetConnectionChecker_4 extends _i1.SmartFake
    implements _i4.InternetConnectionChecker {
  _FakeInternetConnectionChecker_4(Object parent, Invocation parentInvocation)
    : super(parent, parentInvocation);
}

class _FakeStreamSubscription_5<T> extends _i1.SmartFake
    implements _i5.StreamSubscription<T> {
  _FakeStreamSubscription_5(Object parent, Invocation parentInvocation)
    : super(parent, parentInvocation);
}

class _FakeInternetState_6 extends _i1.SmartFake implements _i2.InternetState {
  _FakeInternetState_6(Object parent, Invocation parentInvocation)
    : super(parent, parentInvocation);
}

class _FakeGetHotels_7 extends _i1.SmartFake implements _i2.GetHotels {
  _FakeGetHotels_7(Object parent, Invocation parentInvocation)
    : super(parent, parentInvocation);
}

/// A class which mocks [FavoriteBloc].
///
/// See the documentation for Mockito's code generation for more information.
class MockFavoriteBloc extends _i1.Mock implements _i2.FavoriteBloc {
  MockFavoriteBloc() {
    _i1.throwOnMissingStub(this);
  }

  @override
  _i2.ToggleFavoriteUseCase get toggleFavoriteUseCase =>
      (super.noSuchMethod(
            Invocation.getter(#toggleFavoriteUseCase),
            returnValue: _FakeToggleFavoriteUseCase_0(
              this,
              Invocation.getter(#toggleFavoriteUseCase),
            ),
          )
          as _i2.ToggleFavoriteUseCase);

  @override
  _i2.FavoriteState get state =>
      (super.noSuchMethod(
            Invocation.getter(#state),
            returnValue: _FakeFavoriteState_1(this, Invocation.getter(#state)),
          )
          as _i2.FavoriteState);

  @override
  _i5.Stream<_i2.FavoriteState> get stream =>
      (super.noSuchMethod(
            Invocation.getter(#stream),
            returnValue: _i5.Stream<_i2.FavoriteState>.empty(),
          )
          as _i5.Stream<_i2.FavoriteState>);

  @override
  bool get isClosed =>
      (super.noSuchMethod(Invocation.getter(#isClosed), returnValue: false)
          as bool);

  @override
  String get id =>
      (super.noSuchMethod(
            Invocation.getter(#id),
            returnValue: _i6.dummyValue<String>(this, Invocation.getter(#id)),
          )
          as String);

  @override
  String get storagePrefix =>
      (super.noSuchMethod(
            Invocation.getter(#storagePrefix),
            returnValue: _i6.dummyValue<String>(
              this,
              Invocation.getter(#storagePrefix),
            ),
          )
          as String);

  @override
  String get storageToken =>
      (super.noSuchMethod(
            Invocation.getter(#storageToken),
            returnValue: _i6.dummyValue<String>(
              this,
              Invocation.getter(#storageToken),
            ),
          )
          as String);

  @override
  _i2.FavoriteState? fromJson(Map<String, dynamic>? json) =>
      (super.noSuchMethod(Invocation.method(#fromJson, [json]))
          as _i2.FavoriteState?);

  @override
  Map<String, dynamic>? toJson(_i2.FavoriteState? state) =>
      (super.noSuchMethod(Invocation.method(#toJson, [state]))
          as Map<String, dynamic>?);

  @override
  void add(_i2.FavoriteEvent? event) => super.noSuchMethod(
    Invocation.method(#add, [event]),
    returnValueForMissingStub: null,
  );

  @override
  void onEvent(_i2.FavoriteEvent? event) => super.noSuchMethod(
    Invocation.method(#onEvent, [event]),
    returnValueForMissingStub: null,
  );

  @override
  void emit(_i2.FavoriteState? state) => super.noSuchMethod(
    Invocation.method(#emit, [state]),
    returnValueForMissingStub: null,
  );

  @override
  void on<E extends _i2.FavoriteEvent>(
    _i7.EventHandler<E, _i2.FavoriteState>? handler, {
    _i7.EventTransformer<E>? transformer,
  }) => super.noSuchMethod(
    Invocation.method(#on, [handler], {#transformer: transformer}),
    returnValueForMissingStub: null,
  );

  @override
  void onTransition(
    _i7.Transition<_i2.FavoriteEvent, _i2.FavoriteState>? transition,
  ) => super.noSuchMethod(
    Invocation.method(#onTransition, [transition]),
    returnValueForMissingStub: null,
  );

  @override
  _i5.Future<void> close() =>
      (super.noSuchMethod(
            Invocation.method(#close, []),
            returnValue: _i5.Future<void>.value(),
            returnValueForMissingStub: _i5.Future<void>.value(),
          )
          as _i5.Future<void>);

  @override
  void onChange(_i7.Change<_i2.FavoriteState>? change) => super.noSuchMethod(
    Invocation.method(#onChange, [change]),
    returnValueForMissingStub: null,
  );

  @override
  void addError(Object? error, [StackTrace? stackTrace]) => super.noSuchMethod(
    Invocation.method(#addError, [error, stackTrace]),
    returnValueForMissingStub: null,
  );

  @override
  void onError(Object? error, StackTrace? stackTrace) => super.noSuchMethod(
    Invocation.method(#onError, [error, stackTrace]),
    returnValueForMissingStub: null,
  );

  @override
  void hydrate({_i7.Storage? storage}) => super.noSuchMethod(
    Invocation.method(#hydrate, [], {#storage: storage}),
    returnValueForMissingStub: null,
  );

  @override
  _i5.Future<void> clear() =>
      (super.noSuchMethod(
            Invocation.method(#clear, []),
            returnValue: _i5.Future<void>.value(),
            returnValueForMissingStub: _i5.Future<void>.value(),
          )
          as _i5.Future<void>);
}

/// A class which mocks [LanguageCubit].
///
/// See the documentation for Mockito's code generation for more information.
class MockLanguageCubit extends _i1.Mock implements _i2.LanguageCubit {
  MockLanguageCubit() {
    _i1.throwOnMissingStub(this);
  }

  @override
  _i2.LanguageState get state =>
      (super.noSuchMethod(
            Invocation.getter(#state),
            returnValue: _FakeLanguageState_2(this, Invocation.getter(#state)),
          )
          as _i2.LanguageState);

  @override
  _i5.Stream<_i2.LanguageState> get stream =>
      (super.noSuchMethod(
            Invocation.getter(#stream),
            returnValue: _i5.Stream<_i2.LanguageState>.empty(),
          )
          as _i5.Stream<_i2.LanguageState>);

  @override
  bool get isClosed =>
      (super.noSuchMethod(Invocation.getter(#isClosed), returnValue: false)
          as bool);

  @override
  String get id =>
      (super.noSuchMethod(
            Invocation.getter(#id),
            returnValue: _i6.dummyValue<String>(this, Invocation.getter(#id)),
          )
          as String);

  @override
  String get storagePrefix =>
      (super.noSuchMethod(
            Invocation.getter(#storagePrefix),
            returnValue: _i6.dummyValue<String>(
              this,
              Invocation.getter(#storagePrefix),
            ),
          )
          as String);

  @override
  String get storageToken =>
      (super.noSuchMethod(
            Invocation.getter(#storageToken),
            returnValue: _i6.dummyValue<String>(
              this,
              Invocation.getter(#storageToken),
            ),
          )
          as String);

  @override
  void languageSelected(String? languageCode, String? countryCode) =>
      super.noSuchMethod(
        Invocation.method(#languageSelected, [languageCode, countryCode]),
        returnValueForMissingStub: null,
      );

  @override
  _i2.LanguageState fromJson(Map<String, dynamic>? json) =>
      (super.noSuchMethod(
            Invocation.method(#fromJson, [json]),
            returnValue: _FakeLanguageState_2(
              this,
              Invocation.method(#fromJson, [json]),
            ),
          )
          as _i2.LanguageState);

  @override
  Map<String, dynamic> toJson(_i2.LanguageState? state) =>
      (super.noSuchMethod(
            Invocation.method(#toJson, [state]),
            returnValue: <String, dynamic>{},
          )
          as Map<String, dynamic>);

  @override
  void emit(_i2.LanguageState? state) => super.noSuchMethod(
    Invocation.method(#emit, [state]),
    returnValueForMissingStub: null,
  );

  @override
  void onChange(_i7.Change<_i2.LanguageState>? change) => super.noSuchMethod(
    Invocation.method(#onChange, [change]),
    returnValueForMissingStub: null,
  );

  @override
  void addError(Object? error, [StackTrace? stackTrace]) => super.noSuchMethod(
    Invocation.method(#addError, [error, stackTrace]),
    returnValueForMissingStub: null,
  );

  @override
  void onError(Object? error, StackTrace? stackTrace) => super.noSuchMethod(
    Invocation.method(#onError, [error, stackTrace]),
    returnValueForMissingStub: null,
  );

  @override
  _i5.Future<void> close() =>
      (super.noSuchMethod(
            Invocation.method(#close, []),
            returnValue: _i5.Future<void>.value(),
            returnValueForMissingStub: _i5.Future<void>.value(),
          )
          as _i5.Future<void>);

  @override
  void hydrate({_i7.Storage? storage}) => super.noSuchMethod(
    Invocation.method(#hydrate, [], {#storage: storage}),
    returnValueForMissingStub: null,
  );

  @override
  _i5.Future<void> clear() =>
      (super.noSuchMethod(
            Invocation.method(#clear, []),
            returnValue: _i5.Future<void>.value(),
            returnValueForMissingStub: _i5.Future<void>.value(),
          )
          as _i5.Future<void>);
}

/// A class which mocks [InternetCubit].
///
/// See the documentation for Mockito's code generation for more information.
class MockInternetCubit extends _i1.Mock implements _i2.InternetCubit {
  MockInternetCubit() {
    _i1.throwOnMissingStub(this);
  }

  @override
  _i3.Connectivity get connectivity =>
      (super.noSuchMethod(
            Invocation.getter(#connectivity),
            returnValue: _FakeConnectivity_3(
              this,
              Invocation.getter(#connectivity),
            ),
          )
          as _i3.Connectivity);

  @override
  _i4.InternetConnectionChecker get connectionChecker =>
      (super.noSuchMethod(
            Invocation.getter(#connectionChecker),
            returnValue: _FakeInternetConnectionChecker_4(
              this,
              Invocation.getter(#connectionChecker),
            ),
          )
          as _i4.InternetConnectionChecker);

  @override
  _i5.StreamSubscription<dynamic> get connectivityStreamSubscription =>
      (super.noSuchMethod(
            Invocation.getter(#connectivityStreamSubscription),
            returnValue: _FakeStreamSubscription_5<dynamic>(
              this,
              Invocation.getter(#connectivityStreamSubscription),
            ),
          )
          as _i5.StreamSubscription<dynamic>);

  @override
  set connectivityStreamSubscription(
    _i5.StreamSubscription<dynamic>? _connectivityStreamSubscription,
  ) => super.noSuchMethod(
    Invocation.setter(
      #connectivityStreamSubscription,
      _connectivityStreamSubscription,
    ),
    returnValueForMissingStub: null,
  );

  @override
  _i5.StreamSubscription<dynamic> get internetCheckerSubscription =>
      (super.noSuchMethod(
            Invocation.getter(#internetCheckerSubscription),
            returnValue: _FakeStreamSubscription_5<dynamic>(
              this,
              Invocation.getter(#internetCheckerSubscription),
            ),
          )
          as _i5.StreamSubscription<dynamic>);

  @override
  set internetCheckerSubscription(
    _i5.StreamSubscription<dynamic>? _internetCheckerSubscription,
  ) => super.noSuchMethod(
    Invocation.setter(
      #internetCheckerSubscription,
      _internetCheckerSubscription,
    ),
    returnValueForMissingStub: null,
  );

  @override
  _i2.InternetState get state =>
      (super.noSuchMethod(
            Invocation.getter(#state),
            returnValue: _FakeInternetState_6(this, Invocation.getter(#state)),
          )
          as _i2.InternetState);

  @override
  _i5.Stream<_i2.InternetState> get stream =>
      (super.noSuchMethod(
            Invocation.getter(#stream),
            returnValue: _i5.Stream<_i2.InternetState>.empty(),
          )
          as _i5.Stream<_i2.InternetState>);

  @override
  bool get isClosed =>
      (super.noSuchMethod(Invocation.getter(#isClosed), returnValue: false)
          as bool);

  @override
  void connectivityResultAction(
    List<_i3.ConnectivityResult>? connectivityResult,
  ) => super.noSuchMethod(
    Invocation.method(#connectivityResultAction, [connectivityResult]),
    returnValueForMissingStub: null,
  );

  @override
  void emitInternetDisconnected() => super.noSuchMethod(
    Invocation.method(#emitInternetDisconnected, []),
    returnValueForMissingStub: null,
  );

  @override
  void emitInternetConnected() => super.noSuchMethod(
    Invocation.method(#emitInternetConnected, []),
    returnValueForMissingStub: null,
  );

  @override
  _i5.Future<void> close() =>
      (super.noSuchMethod(
            Invocation.method(#close, []),
            returnValue: _i5.Future<void>.value(),
            returnValueForMissingStub: _i5.Future<void>.value(),
          )
          as _i5.Future<void>);

  @override
  void emit(_i2.InternetState? state) => super.noSuchMethod(
    Invocation.method(#emit, [state]),
    returnValueForMissingStub: null,
  );

  @override
  void onChange(_i7.Change<_i2.InternetState>? change) => super.noSuchMethod(
    Invocation.method(#onChange, [change]),
    returnValueForMissingStub: null,
  );

  @override
  void addError(Object? error, [StackTrace? stackTrace]) => super.noSuchMethod(
    Invocation.method(#addError, [error, stackTrace]),
    returnValueForMissingStub: null,
  );

  @override
  void onError(Object? error, StackTrace? stackTrace) => super.noSuchMethod(
    Invocation.method(#onError, [error, stackTrace]),
    returnValueForMissingStub: null,
  );
}

/// A class which mocks [FetchHotelsCubit].
///
/// See the documentation for Mockito's code generation for more information.
class MockFetchHotelsCubit extends _i1.Mock implements _i2.FetchHotelsCubit {
  MockFetchHotelsCubit() {
    _i1.throwOnMissingStub(this);
  }

  @override
  _i2.GetHotels get usecase =>
      (super.noSuchMethod(
            Invocation.getter(#usecase),
            returnValue: _FakeGetHotels_7(this, Invocation.getter(#usecase)),
          )
          as _i2.GetHotels);

  @override
  _i2.FetchHotelsState get state =>
      (super.noSuchMethod(
            Invocation.getter(#state),
            returnValue: _i6.dummyValue<_i2.FetchHotelsState>(
              this,
              Invocation.getter(#state),
            ),
          )
          as _i2.FetchHotelsState);

  @override
  _i5.Stream<_i2.FetchHotelsState> get stream =>
      (super.noSuchMethod(
            Invocation.getter(#stream),
            returnValue: _i5.Stream<_i2.FetchHotelsState>.empty(),
          )
          as _i5.Stream<_i2.FetchHotelsState>);

  @override
  bool get isClosed =>
      (super.noSuchMethod(Invocation.getter(#isClosed), returnValue: false)
          as bool);

  @override
  void fetchHotels() => super.noSuchMethod(
    Invocation.method(#fetchHotels, []),
    returnValueForMissingStub: null,
  );

  @override
  void emit(_i2.FetchHotelsState? state) => super.noSuchMethod(
    Invocation.method(#emit, [state]),
    returnValueForMissingStub: null,
  );

  @override
  void onChange(_i7.Change<_i2.FetchHotelsState>? change) => super.noSuchMethod(
    Invocation.method(#onChange, [change]),
    returnValueForMissingStub: null,
  );

  @override
  void addError(Object? error, [StackTrace? stackTrace]) => super.noSuchMethod(
    Invocation.method(#addError, [error, stackTrace]),
    returnValueForMissingStub: null,
  );

  @override
  void onError(Object? error, StackTrace? stackTrace) => super.noSuchMethod(
    Invocation.method(#onError, [error, stackTrace]),
    returnValueForMissingStub: null,
  );

  @override
  _i5.Future<void> close() =>
      (super.noSuchMethod(
            Invocation.method(#close, []),
            returnValue: _i5.Future<void>.value(),
            returnValueForMissingStub: _i5.Future<void>.value(),
          )
          as _i5.Future<void>);
}
