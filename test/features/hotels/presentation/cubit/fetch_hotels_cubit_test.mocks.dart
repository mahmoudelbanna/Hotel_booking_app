// Mocks generated by Mockito 5.4.5 from annotations
// in hotel_booking_app/test/features/hotels/presentation/cubit/fetch_hotels_cubit_test.dart.
// Do not manually edit this file.

// ignore_for_file: no_leading_underscores_for_library_prefixes
import 'dart:async' as _i4;

import 'package:dartz/dartz.dart' as _i3;
import 'package:hotel_booking_app/hotel_booking_app.dart' as _i2;
import 'package:mockito/mockito.dart' as _i1;

// ignore_for_file: type=lint
// ignore_for_file: avoid_redundant_argument_values
// ignore_for_file: avoid_setters_without_getters
// ignore_for_file: comment_references
// ignore_for_file: deprecated_member_use
// ignore_for_file: deprecated_member_use_from_same_package
// ignore_for_file: implementation_imports
// ignore_for_file: invalid_use_of_visible_for_testing_member
// ignore_for_file: must_be_immutable
// ignore_for_file: prefer_const_constructors
// ignore_for_file: unnecessary_parenthesis
// ignore_for_file: camel_case_types
// ignore_for_file: subtype_of_sealed_class

class _FakeHotelsRepository_0 extends _i1.SmartFake
    implements _i2.HotelsRepository {
  _FakeHotelsRepository_0(Object parent, Invocation parentInvocation)
    : super(parent, parentInvocation);
}

class _FakeEither_1<L, R> extends _i1.SmartFake implements _i3.Either<L, R> {
  _FakeEither_1(Object parent, Invocation parentInvocation)
    : super(parent, parentInvocation);
}

/// A class which mocks [GetHotels].
///
/// See the documentation for Mockito's code generation for more information.
class MockGetHotels extends _i1.Mock implements _i2.GetHotels {
  MockGetHotels() {
    _i1.throwOnMissingStub(this);
  }

  @override
  _i2.HotelsRepository get repository =>
      (super.noSuchMethod(
            Invocation.getter(#repository),
            returnValue: _FakeHotelsRepository_0(
              this,
              Invocation.getter(#repository),
            ),
          )
          as _i2.HotelsRepository);

  @override
  _i4.Future<_i3.Either<_i2.Failure, List<_i2.Hotel>>> call() =>
      (super.noSuchMethod(
            Invocation.method(#call, []),
            returnValue:
                _i4.Future<_i3.Either<_i2.Failure, List<_i2.Hotel>>>.value(
                  _FakeEither_1<_i2.Failure, List<_i2.Hotel>>(
                    this,
                    Invocation.method(#call, []),
                  ),
                ),
          )
          as _i4.Future<_i3.Either<_i2.Failure, List<_i2.Hotel>>>);
}
